# Customer Churn Analytics With R

# Churn is the same as turnover. When a client buys a product or hire a service, he/she probably will not keep it for all the eternity, 
# so, in some moment the client will no longer be a client, that is what churn means.
# Thereby, we pretend to predict the Churn based in historical data collected.
# Who will be the next customer to turnover a product or service? 
# After answering this question, we can define the best future strategy to be adopted.

# The customer churn happens when a client or subscriber stop doing business with a company or service. 
# It is also known as client loss or revocation rate. 
# To know and to predict these revocation rates is particularly useful for the telecommunication industry, 
# because most customers have several options to choose from within a geographic location. 

# In this project we will predict de customer churn using a telecommunication dataset. 
# We will use some of the many Machine Learning algorithms, such as logistic regression, decision tree and random forest. 

# The dataset is offered by IBM Sample Data Sets.

# Each dataset line represents a client and each column has all its features. 

# https://www.ibm.com/communities/analytics/watson-analytics-blog/guide-to-sample-datasets/

# Set Workspace
setwd("C:/CursoFCD/3.0BigData_Analytics_R_e_Azure_MachineLearning/Pratica/Cap06")
getwd()

# Load Packages
library(plyr)
library(dplyr)
library(corrplot)
library(ggplot2)
library(gridExtra)
library(ggthemes)
library(caret) # Offers logistic regression and decision tree algorithms. You need to previously install the lattice package.
library(MASS)
library(randomForest) # Offers random forest algorithm
library(party) # Offers report tools
sessionInfo()

# **** Loading and Cleaning Data ****

# The raw data has 7043 lines (customers) and 21 columns (features).
# The "churn" columns is our target variable.
churn <- read.csv('06-Telco-Customer-Churn.csv', stringsAsFactors = TRUE)

# The column of interest stores categorical values, or factors, with only two levels: "yes" and "no". 
# In other words, the client has canceled the service or no? 
View(churn)
head(churn, 3)
dim(churn)
nrow(churn)
ncol(churn)
str(churn)

# First, we will use the sapply() function, one of the many from the apply family. 
sapply(churn,function(x) sum (is.na(x)))
help(complete.cases) 
example(complete.cases)
churn <- churn[complete.cases(churn),]
sapply(churn,function(x) sum (is.na(x)))

# Second Change: We will replace the sentence "No internet service" with "No" in six differents columns:
# "OnlineSecurity", "OnlineBackup", "DeviceProtection", "TechSupport", "StreamingTV", "StreamingMovies".
str(churn)
summary(churn)
# We can create a loop that will replace the values in each columns so as we desire. 
# First, let's create a vector which will store a range values going from 10 to 15.
cols_recode1 <- c(10:15)

for(i in 1:ncol(churn[,cols_recode1])){
  churn[,cols_recode1][,i] <- as.factor(mapvalues
                                        (churn[,cols_recode1][,i],
                                          from = c("No internet service"),
                                          to = c("No")))
}

View(churn)

# Third change: Replace "No phone service" with "No" in the column"MultipleLines".
churn$MultipleLines <- as.factor(mapvalues(churn$MultipleLines,
                                           from = c("No phone service"),
                                           to = c("No")))


head(churn,3)

# Fourth change: The "tenure" column is related to the lenght period the customer had the service. 
# The minimum lenght period is 1 month and the maximum is 72 meses. Well, we can split it into 5 different groups, like:
# "0-12 Mês", "12-24 Mês", "24-48 Mês", "48-60 Mês", Mês "," > 60 Mês.
min(churn$tenure); max(churn$tenure)

group_tenure <- function(tenure) {
  if(tenure>= 0 & tenure <= 12){
    return('0-12 Month')
  } else if(tenure > 12 & tenure <= 24){
    return('12-24 Month')
  } else if (tenure > 24 & tenure <= 48){
    return('24-48 Month')
  } else if (tenure > 48 & tenure <= 60){
    return('48-60 Month') 
  } else if (tenure > 60){
    return('> 60 Month')
  }
}

# Apply the function in the column "group_tenure".
# Store the values in a new column.
churn$tenure_group <- sapply(churn$tenure, group_tenure)
churn$tenure_group <- as.factor(churn$tenure_group)
str(churn$tenure_group)
View(churn)

# Fifth Change: Change "SeniorCitizen" values from  0 or 1 to "No" or "Yes".
churn$SeniorCitizen <- as.factor(mapvalues(churn$SeniorCitizen,
                                           from = c("0","1"),
                                           to = c("No","Yes")))
str(churn$SeniorCitizen)


# Sixth Change: Remove unnecessary columns.
# Usually, the ID column is not useful to create our model, so let's remove it.
churn$customerID <- NULL
churn$tenure <- NULL
View(churn)

#### **** Exploratory Analysis and Feature Selection **** ####

### Check Numerical Variables Correlation ###
# Filter only the numerical variables.
numeric.var <- sapply(churn,is.numeric)
numeric.var
# Use the function "cor()" to create a correlation matrix with the numerical variables.
corr.matrix <- cor(churn[,numeric.var])
corr.matrix

# Plot a correlation matrix chart.
corrplot(corr.matrix,main="\n\nNumerical Variable Correlation Chart", col = cm.colors(100), tl.col = "black")

# Since both variables has a strong correlation level, we can remove one of them in order to avoid Overfitting.
churn$TotalCharges <- NULL

##### Categorical Variables Bar Chart #####

# GENDER:
p1 <- ggplot(churn, aes(x=gender)) + ggtitle("Gender") + xlab("Sex") +
  geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5, fill = "red", alpha = 0.8) + 
  ylab("Percentage") + coord_flip() + theme_minimal()
# SENIOR CITIZEN:
p2 <- ggplot(churn, aes(x=SeniorCitizen)) + ggtitle("Senior Citizen") + xlab("Senior Citizen") + 
  geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5, fill = "blue", alpha = 0.8) + 
  ylab("Percentage") + coord_flip() + theme_minimal()
# PARTNER:
p3 <- ggplot(churn, aes(x=Partner)) + ggtitle("Partner") + xlab("Partner") + 
  geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5, fill = "aquamarine", alpha = 0.8) + 
  ylab("Percentage") + coord_flip() + theme_minimal()
# DEPENDENTS:
p4 <- ggplot(churn, aes(x=Dependents)) + ggtitle("Dependents") + xlab("Dependents") +
  geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5, fill = "plum", alpha = 0.8) +
  ylab("Percentage") + coord_flip() + theme_minimal()

grid.arrange(p1, p2, p3, p4, ncol=2)

# PHONESERVICE:
p5 <- ggplot(churn, aes(x=PhoneService)) + ggtitle("Phone Service") + xlab("Phone Service") +
  geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5, fill = "wheat1", alpha = 0.8) + 
  ylab("Percentage") + coord_flip() + theme_minimal()
# MULTIPLELINES
p6 <- ggplot(churn, aes(x=MultipleLines)) + ggtitle("Multiple Lines") + xlab("Multiple Lines") + 
  geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5, fill = "lightgreen", alpha = 0.8) + 
  ylab("Percentage") + coord_flip() + theme_minimal()
# INTERNETSERVICE:
p7 <- ggplot(churn, aes(x=InternetService)) + ggtitle("Internet Service") + xlab("Internet Service") + 
  geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5, fill = "slategray1", alpha = 0.8) + 
  ylab("Percentage") + coord_flip() + theme_minimal()
# ONLINESECURITY:
p8 <- ggplot(churn, aes(x=OnlineSecurity)) + ggtitle("Online Security") + xlab("Online Security") +
  geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5, fill = "mistyrose1", alpha = 0.8) + 
  ylab("Percentage") + coord_flip() + theme_minimal()

grid.arrange(p5, p6, p7, p8, ncol=2)

# ONLINEBACKUP:
p9 <- ggplot(churn, aes(x=OnlineBackup)) + ggtitle("Online Backup") + xlab("Online Backup") +
  geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5,fill = "orangered1", alpha = 0.8) + 
  ylab("Percentage") + coord_flip() + theme_minimal()
# DEVICEPROTECTION:
p10 <- ggplot(churn, aes(x=DeviceProtection)) + ggtitle("Device Protection") + xlab("Device Protection") + 
  geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5,fill = "orchid1", alpha = 0.8) + 
  ylab("Percentage") + coord_flip() + theme_minimal()
# TECHSUPPORT:
p11 <- ggplot(churn, aes(x=TechSupport)) + ggtitle("Tech Support") + xlab("Tech Support") + 
  geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5,fill = "palegreen", alpha = 0.8) + 
  ylab("Percentage") + coord_flip() + theme_minimal()
# STREAMINGTV:
p12 <- ggplot(churn, aes(x=StreamingTV)) + ggtitle("Streaming TV") + xlab("Streaming TV") +
  geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5,fill = "azure2") + 
  ylab("Percentage") + coord_flip() + theme_minimal()

grid.arrange(p9, p10, p11, p12, ncol=2)

# STREAMINGMOVIES:
p13 <- ggplot(churn, aes(x=StreamingMovies)) + ggtitle("Streaming Movies") + xlab("Streaming Movies") +
  geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5, fill = "chocolate1", alpha = 0.8) + 
  ylab("Percentage") + coord_flip() + theme_minimal()
# CONTRACT:
p14 <- ggplot(churn, aes(x=Contract)) + ggtitle("Contract") + xlab("Contract") + 
  geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5, fill = "brown1", alpha = 0.8) + 
  ylab("Percentage") + coord_flip() + theme_minimal()
# PAPERLESSBILLING:
p15 <- ggplot(churn, aes(x=PaperlessBilling)) + ggtitle("Paperless Billing") + xlab("Paperless Billing") + 
  geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5, fill = "coral1", alpha = 0.8) + 
  ylab("Percentage") + coord_flip() + theme_minimal()
# PAYMENTMETHOD:
p16 <- ggplot(churn, aes(x=PaymentMethod)) + ggtitle("Payment Method") + xlab("Payment Method") +
  geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5, fill = "darkgoldenrod1", alpha = 0.8) + 
  ylab("Percentage") + coord_flip() + theme_minimal()
# TENURE_GROUP:
p17 <- ggplot(churn, aes(x=tenure_group)) + ggtitle("Tenure Group") + xlab("Tenure Group") +
  geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5, fill = "bisque2", alpha = 0.8) + 
  ylab("Percentage") + coord_flip() + theme_minimal()

grid.arrange(p13, p14, p15, p16, p17, ncol=2)

View(churn)

# All categorical variables seem to show a reasonable wide distribution, therefore, we will keep them in our dataset. 

# **** Predictive Modeling ****

#### Logistic Regression ####
# -> The Logistic Regression is a Machine Learning Algorithm for classification problems. 

# First of all, we will divide the original data into training and testing data.
# Proportion of 70% to train and 30% to test.
help("createDataPartition")
help("set.seed")
set.seed(2017)
intrain <- createDataPartition(churn$Churn, p=0.7, list = FALSE)
class(intrain) # uma matriz com os dados de teste 
training <- churn[intrain,]
class(training)
testing <- churn[-intrain,]
class(testing)
View(training)
View(testing)

# Evaluate data splitting.
dim(training)
dim(testing)

# Logistic Regression Training.
help(glm)
LogModel <- glm(Churn ~., family = binomial(link="logit"), data = training)
print(summary(LogModel))

#### Variance Analysis ANOVA ####

# The three most important resources are: Contract, tenure_group and PaperlessBilling. 
# The ANOVA function compute variance analysis for one or more predictive model.
help(anova)
anova(LogModel, test="Chisq")

# Let's replace the values "No" or "Yes" to "0" or "1" in the "Churn" column.
testing$Churn <- as.character(testing$Churn)
testing$Churn[testing$Churn=="No"] <- "0"
testing$Churn[testing$Churn=="Yes"] <- "1"
head(testing, 3)

# Check model accuracy.
fitted.results <- predict(LogModel,newdata=testing,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != testing$Churn)
print(misClasificError)
print(paste('Logistic Regression Accuracy',1-misClasificError))

# Print the confusion matrix.
print("Confusion Matrix for Logistic Regression");table(testing$Churn, fitted.results > 0.5)
library(gmodels)
CrossTable(fitted.results, testing$Churn, prop.chisq = FALSE, 
           prop.t = FALSE, prop.r = FALSE, dnn = c("predicted", "actual"))

# Another useful measure is the Odds Ratio for Logistic Confusion.
# Odds Ratio represents the chance of an event happens
exp(cbind(OR=coef(LogModel), confint(LogModel)))
str(testing)

#### Decision Tree ####

# Plotting a Decision Tree.
# For illustration purposes, let's use three variables to create the Decision Tree model.
# These variables are: Contract, tenure_group and PaperlessBilling.
?ctree
tree <- ctree(Churn ~ Contract+tenure_group+PaperlessBilling, training)
plot(tree, type='simple')

# Decision Tree Predictions and Confusion Matrix.
pred_tree <- predict(tree, testing)
CrossTable(pred_tree, testing$Churn, prop.chisq = FALSE, prop.t = FALSE, prop.r = FALSE, dnn = c("predicted", "actual"))

# Accuracy Level.
p1 <- predict(tree, training)
tab1 <- table(Predicted = p1, Actual = training$Churn)
tab2 <- table(Predicted = pred_tree, Actual = testing$Churn)
print(paste('Decision Tree Accuracy',sum(diag(tab2))/sum(tab2)))

##### Random Forest #####

set.seed(2017)
?randomForest
# randomForest function creates a classification and regression algorithm.
rfModel <- randomForest(Churn~.,data = training)
print(rfModel)
# Random Forest trype: classification.
# Number of trees: 500.
plot(rfModel)

# It has good performance when is predicting "No". 
# The error rate increases when is predicting "Yes".

# Predicting values.
pred_rf <- predict(rfModel, testing)

# Confusion Matrix.
CrossTable(pred_rf, testing$Churn, prop.chisq = FALSE, prop.t = FALSE, prop.r = FALSE, dnn = c("predicted", "actual"))


# Check the most important resources.
?varImpPlot
# varImpPlot function will look to the model and search for the most important variables
varImpPlot(rfModel, sort=T, n.var = 10, main = 'Top 10 Feature Importance')
